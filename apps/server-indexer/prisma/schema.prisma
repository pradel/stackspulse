generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client-generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dapp {
  id           String        @id @map("id")
  name         String        @map("name")
  createdAt    DateTime      @map("created_at")
  updatedAt    DateTime      @map("updated_at")
  transactions Transaction[] @relation("DappTransactions")
}

model Block {
  height       Int           @id @map("height")
  timestamp    Int           @map("timestamp")
  transactions Transaction[] @relation("BlockTransactions")
}

model Transaction {
  id                       String @id @map("id")
  index                    Int    @map("index") @db.SmallInt
  blockHeight              Int    @map("block_height")
  block                    Block  @relation("BlockTransactions", fields: [blockHeight], references: [height])
  contractCallContractId   String @map("contract_call_contract_id")
  contractCallFunctionName String @map("contract_call_function_name")
  dappId                   String @map("dapp_id")
  dapp                     Dapp   @relation("DappTransactions", fields: [dappId], references: [id])
}

model Token {
  // token address
  id             String  @id @map("id")
  // token symbol
  symbol         String  @map("symbol")
  // token name
  name           String  @map("name")
  // token decimals
  decimals       Int     @map("decimals")
  // transactions across all pools that include this token
  txCount        BigInt  @map("tx_count")
  // number of pools containing this token
  poolCount      Int     @map("pool_count")
  // pools where this token is token0
  poolsAsToken0  Pool[]  @relation("PoolToken0")
  // pools where this token is token1
  poolsAsToken1  Pool[]  @relation("PoolToken1")
  // pools where this token is token0
  tradesAsToken0 Trade[] @relation("SwapToken0")
  // pools where this token is token1
  tradesAsToken1 Trade[] @relation("SwapToken1")
}

model Pool {
  id       String  @id @map("id")
  // first token in the pool
  token0Id String  @map("token0_id")
  token0   Token   @relation("PoolToken0", fields: [token0Id], references: [id])
  // second token in the pool
  token1Id String  @map("token1_id")
  token1   Token   @relation("PoolToken1", fields: [token1Id], references: [id])
  // all time number of transactions
  txCount  BigInt  @map("tx_count")
  trades   Trade[]
}

model Trade {
  // transaction hash + "-" + index in swaps Transaction array
  id        String @id @map("id")
  // pool swap occured within
  poolId    String @map("pool_id")
  pool      Pool   @relation(fields: [poolId], references: [id])
  // token swapped in
  token0Id  String @map("token0_id")
  token0    Token  @relation("SwapToken0", fields: [token0Id], references: [id])
  // token swapped out
  token1Id  String @map("token1_id")
  token1    Token  @relation("SwapToken1", fields: [token1Id], references: [id])
  // sender of the swap
  sender    String @map("sender")
  // delta of token0
  amountIn  BigInt @map("amount_in")
  // delta of token1
  amountOut BigInt @map("amount_out")
  // index within the txn
  txIndex   Int    @map("tx_index")
}
